/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ECRegistryV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECRegistryV2__factory>;
    getContractFactory(
      name: "EtherCardsForge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EtherCardsForge__factory>;
    getContractFactory(
      name: "IAccidentalCollaboration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccidentalCollaboration__factory>;
    getContractFactory(
      name: "IECRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IECRegistry__factory>;
    getContractFactory(
      name: "EtherCardsForge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EtherCardsForge__factory>;
    getContractFactory(
      name: "IAccidentalCollaboration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccidentalCollaboration__factory>;
    getContractFactory(
      name: "IECRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IECRegistry__factory>;
    getContractFactory(
      name: "TraitUint8ArrayValueImplementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TraitUint8ArrayValueImplementer__factory>;
    getContractFactory(
      name: "TraitUint8ValueImplementer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TraitUint8ValueImplementer__factory>;
    getContractFactory(
      name: "IECRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IECRegistry__factory>;
    getContractFactory(
      name: "AccidentalCollaboration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccidentalCollaboration__factory>;
    getContractFactory(
      name: "PunkBattleTicketValue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PunkBattleTicketValue__factory>;
    getContractFactory(
      name: "NFTToolbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTToolbox__factory>;
    getContractFactory(
      name: "TestNetERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestNetERC721__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}
