/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface EtherCardsForgeInterface extends ethers.utils.Interface {
  functions: {
    "ECRegistry()": FunctionFragment;
    "NFTContract()": FunctionFragment;
    "Vault()": FunctionFragment;
    "_locked()": FunctionFragment;
    "lock(bool)": FunctionFragment;
    "logData(bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retrieve721(address,uint256)": FunctionFragment;
    "retrieveERC20(address,uint256)": FunctionFragment;
    "transferLayers(uint16,uint16,bytes,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateNFTContractAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ECRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NFTContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "_locked", values?: undefined): string;
  encodeFunctionData(functionFragment: "lock", values: [boolean]): string;
  encodeFunctionData(functionFragment: "logData", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieve721",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLayers",
    values: [BigNumberish, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNFTContractAddress",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "ECRegistry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NFTContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "logData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieve721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNFTContractAddress",
    data: BytesLike
  ): Result;

  events: {
    "ECRegistryUpdateEvent(address)": EventFragment;
    "LayerTransferEvent(uint16,uint16,bytes)": EventFragment;
    "LoggedEvent(address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ECRegistryUpdateEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LayerTransferEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoggedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ECRegistryUpdateEventEvent = TypedEvent<
  [string] & { _addr: string }
>;

export type LayerTransferEventEvent = TypedEvent<
  [number, number, string] & { src: number; dst: number; callData: string }
>;

export type LoggedEventEvent = TypedEvent<
  [string, string] & { from: string; data: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class EtherCardsForge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EtherCardsForgeInterface;

  functions: {
    ECRegistry(overrides?: CallOverrides): Promise<[string]>;

    NFTContract(overrides?: CallOverrides): Promise<[string]>;

    Vault(overrides?: CallOverrides): Promise<[string]>;

    _locked(overrides?: CallOverrides): Promise<[boolean]>;

    lock(
      mode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    logData(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      from: string,
      receivedTokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieve721(
      _tracker: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveERC20(
      _tracker: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferLayers(
      srcTokenId: BigNumberish,
      dstTokenId: BigNumberish,
      data: BytesLike,
      dataReadPointer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateNFTContractAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ECRegistry(overrides?: CallOverrides): Promise<string>;

  NFTContract(overrides?: CallOverrides): Promise<string>;

  Vault(overrides?: CallOverrides): Promise<string>;

  _locked(overrides?: CallOverrides): Promise<boolean>;

  lock(
    mode: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  logData(
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    from: string,
    receivedTokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieve721(
    _tracker: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveERC20(
    _tracker: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferLayers(
    srcTokenId: BigNumberish,
    dstTokenId: BigNumberish,
    data: BytesLike,
    dataReadPointer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateNFTContractAddress(
    _newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ECRegistry(overrides?: CallOverrides): Promise<string>;

    NFTContract(overrides?: CallOverrides): Promise<string>;

    Vault(overrides?: CallOverrides): Promise<string>;

    _locked(overrides?: CallOverrides): Promise<boolean>;

    lock(mode: boolean, overrides?: CallOverrides): Promise<void>;

    logData(_data: BytesLike, overrides?: CallOverrides): Promise<void>;

    onERC721Received(
      arg0: string,
      from: string,
      receivedTokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retrieve721(
      _tracker: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveERC20(
      _tracker: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferLayers(
      srcTokenId: BigNumberish,
      dstTokenId: BigNumberish,
      data: BytesLike,
      dataReadPointer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNFTContractAddress(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ECRegistryUpdateEvent(address)"(
      _addr?: null
    ): TypedEventFilter<[string], { _addr: string }>;

    ECRegistryUpdateEvent(
      _addr?: null
    ): TypedEventFilter<[string], { _addr: string }>;

    "LayerTransferEvent(uint16,uint16,bytes)"(
      src?: BigNumberish | null,
      dst?: BigNumberish | null,
      callData?: null
    ): TypedEventFilter<
      [number, number, string],
      { src: number; dst: number; callData: string }
    >;

    LayerTransferEvent(
      src?: BigNumberish | null,
      dst?: BigNumberish | null,
      callData?: null
    ): TypedEventFilter<
      [number, number, string],
      { src: number; dst: number; callData: string }
    >;

    "LoggedEvent(address,bytes)"(
      from?: string | null,
      data?: BytesLike | null
    ): TypedEventFilter<[string, string], { from: string; data: string }>;

    LoggedEvent(
      from?: string | null,
      data?: BytesLike | null
    ): TypedEventFilter<[string, string], { from: string; data: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    ECRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    NFTContract(overrides?: CallOverrides): Promise<BigNumber>;

    Vault(overrides?: CallOverrides): Promise<BigNumber>;

    _locked(overrides?: CallOverrides): Promise<BigNumber>;

    lock(
      mode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    logData(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      from: string,
      receivedTokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieve721(
      _tracker: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveERC20(
      _tracker: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferLayers(
      srcTokenId: BigNumberish,
      dstTokenId: BigNumberish,
      data: BytesLike,
      dataReadPointer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateNFTContractAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ECRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NFTContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(
      mode: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    logData(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      from: string,
      receivedTokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieve721(
      _tracker: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveERC20(
      _tracker: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferLayers(
      srcTokenId: BigNumberish,
      dstTokenId: BigNumberish,
      data: BytesLike,
      dataReadPointer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateNFTContractAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
